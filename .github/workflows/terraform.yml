# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: Terraform Plan and Apply

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Enable manual triggers

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init

      # Run Terraform Plan
      - name: Terraform Plan
        run: terraform plan
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          TF_VAR_dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          TF_VAR_dockerhub_password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Apply Terraform Changes
      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          TF_VAR_dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          TF_VAR_dockerhub_password: ${{ secrets.DOCKERHUB_PASSWORD }}

  docker:
    runs-on: ubuntu-latest
    needs: terraform  # Run after the Terraform job

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v2

      # Check if Dockerfile exists
      - name: Check for Dockerfile
        id: check-dockerfile
        run: |
          if [ -f Dockerfile ]; then
            echo "Dockerfile exists"
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Dockerfile does not exist"
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
          fi

      # Log in to Docker Hub (only if Dockerfile exists)
      - name: Log in to Docker Hub
        if: steps.check-dockerfile.outputs.dockerfile_exists == 'true'
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

     # Check if GitHub Actions is passing credentials properly
      - name: Debug Terraform Variables
        run: env | grep TF_VAR

      # Build Docker Image (only if Dockerfile exists)
      - name: Build Docker Image
        if: steps.check-dockerfile.outputs.dockerfile_exists == 'true'
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest .

      # Push Docker Image to Docker Hub (only if Dockerfile exists)
      - name: Push Docker Image
        if: steps.check-dockerfile.outputs.dockerfile_exists == 'true'
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest
